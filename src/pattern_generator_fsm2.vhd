-- This file was generated by				
-- Qfsm Version 0.55					
-- (C) Stefan Duffner, Rainer Strobel, Aaron Erhardt			


-- Inputs:   rxd_rec   tc_pm   pm_control_changed   pm_control[1]   pm_control[0]
-- State/Output         en_pm en_pm_cnt clr_pm_cnt pm_checked
-- wait_for_pm_change_s 0     0         0          0          
-- clr_addr_cmt         0     0         1          0          
-- wait_for_pm_data_s   0     0         0          0          
-- fetch_pm_data_s      1     0         0          0          
-- cnt_addr_up_s        0     1         0          0          
-- check_addr_end_s     0     0         0          0          
-- pm_checked_s         0     0         0          1          
-- cnt_one_up           0     1         0          0          
-- cnt_addr_s           0     1         0          0          

LIBRARY IEEE;

USE IEEE.std_logic_1164.ALL;

ENTITY pattern_generator_fsm IS
  PORT (clk: IN std_ulogic;
        sen_p: IN std_ulogic;
        rst_n: IN std_ulogic;
        rxd_rec: IN std_ulogic;
        tc_pm: IN std_ulogic;
        pm_control_changed: IN std_ulogic;
        pm_control: IN std_ulogic_vector(1 DOWNTO 0);
        en_pm: OUT std_ulogic;
        en_pm_cnt: OUT std_ulogic;
        clr_pm_cnt: OUT std_ulogic;
        pm_checked: OUT std_ulogic);
END pattern_generator_fsm;

ARCHITECTURE behave OF pattern_generator_fsm IS

TYPE state_type IS (wait_for_pm_change_s, clr_addr_cmt, wait_for_pm_data_s, fetch_pm_data_s, cnt_addr_up_s, check_addr_end_s, pm_checked_s, cnt_one_up, cnt_addr_s);
SIGNAL next_state, current_state : state_type;

BEGIN
  state_register: PROCESS (rst_n, sen_p, clk)
  BEGIN
    IF rst_n='0' THEN
      current_state <= wait_for_pm_change_s;
    ELSIF rising_edge(clk) THEN
      IF sen_p='1' THEN
        current_state <= next_state;
      END IF;
    END IF;
  END PROCESS;

  next_state_and_output_logic: PROCESS (current_state, rxd_rec, tc_pm, pm_control_changed, pm_control(1 DOWNTO 0))
    VARIABLE temp_input : std_ulogic_vector(4 DOWNTO 0);
    VARIABLE temp_output : std_ulogic_vector(3 DOWNTO 0);
  BEGIN
    temp_input := rxd_rec & tc_pm & pm_control_changed & pm_control(1) & pm_control(0);
    CASE current_state IS
      WHEN wait_for_pm_change_s => temp_output := "0000";
        CASE temp_input IS
          WHEN "00100" | "10100" | "01100" | "00110" | "00101" | "11100" | "10110" | "10101" | "01110" | "01101" | "00111" | "11110" | "11101" | "10111" | "01111" | "11111" =>
            next_state <= clr_addr_cmt;
          WHEN "00000" | "10000" | "01000" | "00010" | "00001" | "11000" | "10010" | "10001" | "01010" | "01001" | "00011" | "11010" | "11001" | "10011" | "01011" | "11011" =>
            next_state <= wait_for_pm_change_s;
          WHEN OTHERS => next_state <= current_state;
        END CASE;
      WHEN clr_addr_cmt => temp_output := "0010";
        CASE temp_input IS
          WHEN "00011" | "10011" | "01011" | "00111" | "11011" | "10111" | "01111" | "11111" =>
            next_state <= wait_for_pm_data_s;
          WHEN "00001" | "10001" | "01001" | "00101" | "11001" | "10101" | "01101" | "11101" | "00010" | "10010" | "01010" | "00110" | "11010" | "10110" | "01110" | "11110" =>
            next_state <= pm_checked_s;
          WHEN "00000" | "10000" | "01000" | "00100" | "11000" | "10100" | "01100" | "11100" =>
            next_state <= pm_checked_s;
          WHEN OTHERS => next_state <= current_state;
        END CASE;
      WHEN wait_for_pm_data_s => temp_output := "0000";
        CASE temp_input IS
          WHEN "10000" | "11000" | "10100" | "10010" | "10001" | "11100" | "11010" | "11001" | "10110" | "10101" | "10011" | "11110" | "11101" | "11011" | "10111" | "11111" =>
            next_state <= fetch_pm_data_s;
          WHEN "00000" | "01000" | "00100" | "00010" | "00001" | "01100" | "01010" | "01001" | "00110" | "00101" | "00011" | "01110" | "01101" | "01011" | "00111" | "01111" =>
            next_state <= wait_for_pm_data_s;
          WHEN OTHERS => next_state <= current_state;
        END CASE;
      WHEN fetch_pm_data_s => temp_output := "1000";
        CASE temp_input IS
          WHEN "00000" | "01000" | "00100" | "00010" | "00001" | "01100" | "01010" | "01001" | "00110" | "00101" | "00011" | "01110" | "01101" | "01011" | "00111" | "01111" =>
            next_state <= cnt_addr_up_s;
          WHEN "10000" | "11000" | "10100" | "10010" | "10001" | "11100" | "11010" | "11001" | "10110" | "10101" | "10011" | "11110" | "11101" | "11011" | "10111" | "11111" =>
            next_state <= fetch_pm_data_s;
          WHEN OTHERS => next_state <= current_state;
        END CASE;
      WHEN cnt_addr_up_s => temp_output := "0100";
            next_state <= check_addr_end_s;
      WHEN check_addr_end_s => temp_output := "0000";
        CASE temp_input IS
          WHEN "01000" | "11000" | "01100" | "01010" | "01001" | "11100" | "11010" | "11001" | "01110" | "01101" | "01011" | "11110" | "11101" | "11011" | "01111" | "11111" =>
            next_state <= pm_checked_s;
          WHEN "00000" | "10000" | "00100" | "00010" | "00001" | "10100" | "10010" | "10001" | "00110" | "00101" | "00011" | "10110" | "10101" | "10011" | "00111" | "10111" =>
            next_state <= wait_for_pm_data_s;
          WHEN OTHERS => next_state <= current_state;
        END CASE;
      WHEN pm_checked_s => temp_output := "0001";
        CASE temp_input IS
          WHEN "00011" | "10011" | "01011" | "00111" | "11011" | "10111" | "01111" | "11111" | "00000" | "10000" | "01000" | "00100" | "11000" | "10100" | "01100" | "11100" =>
            next_state <= wait_for_pm_change_s;
          WHEN "00010" | "10010" | "01010" | "00110" | "11010" | "10110" | "01110" | "11110" | "00001" | "10001" | "01001" | "00101" | "11001" | "10101" | "01101" | "11101" =>
            next_state <= cnt_one_up;
          WHEN OTHERS => next_state <= current_state;
        END CASE;
      WHEN cnt_one_up => temp_output := "0100";
            next_state <= cnt_addr_s;
      WHEN cnt_addr_s => temp_output := "0100";
        CASE temp_input IS
          WHEN "00100" | "10100" | "01100" | "00110" | "00101" | "11100" | "10110" | "10101" | "01110" | "01101" | "00111" | "11110" | "11101" | "10111" | "01111" | "11111" | "01001" | "11001" =>
            next_state <= wait_for_pm_change_s;
          WHEN OTHERS =>
            next_state <= cnt_addr_s;
        END CASE;
      WHEN OTHERS => temp_output := (OTHERS =>'X');
      next_state <= wait_for_pm_change_s;
    END CASE;
    en_pm <= temp_output(3);
    en_pm_cnt <= temp_output(2);
    clr_pm_cnt <= temp_output(1);
    pm_checked <= temp_output(0);
  END PROCESS;

END behave;
